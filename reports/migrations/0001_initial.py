# Generated by Django 5.0.6 on 2024-08-02 08:55

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import reports.validators
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название города')),
            ],
            options={
                'verbose_name': 'Город',
                'verbose_name_plural': 'Города',
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.CharField(max_length=18, primary_key=True, serialize=False, verbose_name='Код')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='Название категории')),
            ],
            options={
                'verbose_name': ('Категория',),
                'verbose_name_plural': 'Категории',
            },
        ),
        migrations.CreateModel(
            name='Warehouse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=254, verbose_name='Склад')),
            ],
            options={
                'verbose_name': 'Склад',
                'verbose_name_plural': 'Склады',
            },
        ),
        migrations.CreateModel(
            name='WorkPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Нзавние должности')),
            ],
            options={
                'verbose_name': 'Должность',
                'verbose_name_plural': 'Должности',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='custom_user_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_permission_set', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('article', models.CharField(max_length=16, primary_key=True, serialize=False, verbose_name='Артикул')),
                ('name', models.CharField(max_length=254, verbose_name='Номенклатура')),
                ('model', models.CharField(max_length=254, null=True, verbose_name='Модель')),
                ('manufacturer', models.CharField(max_length=254, null=True, verbose_name='Производитель')),
                ('square', models.FloatField(null=True, verbose_name='Площадь номенклатуры')),
                ('segment', models.CharField(max_length=254, null=True, verbose_name='Сегмент')),
                ('matrix', models.CharField(max_length=254, null=True, verbose_name='Матрица')),
                ('room_class', models.CharField(blank=True, max_length=8, null=True, verbose_name='Класс комнаты')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='category_product', to='reports.productcategory', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
            },
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=254, verbose_name='Название магазина')),
                ('info', models.TextField(blank=True, null=True, verbose_name='Информация о салоне')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='cities', to='reports.city')),
            ],
            options={
                'verbose_name': 'Магазин',
                'verbose_name_plural': 'Магазины',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Комментарий')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('finish_planned_date', models.DateTimeField(validators=[reports.validators.validate_future_date], verbose_name='Планируемая дата выполнения')),
                ('status', models.CharField(default='Не выполнено', max_length=56, verbose_name='Статус комментария')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(db_column='product_article', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='comments', to='reports.product', verbose_name='Товар')),
                ('store', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='comments', to='reports.store')),
            ],
            options={
                'verbose_name': 'Комментарий',
                'verbose_name_plural': 'Комментарии',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='store',
            field=models.ManyToManyField(related_name='stores', to='reports.store'),
        ),
        migrations.CreateModel(
            name='StoreProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plan_exhibition', models.IntegerField(blank=True, null=True, verbose_name='План выставки')),
                ('fact_exhibition', models.IntegerField(blank=True, default=0, null=True, verbose_name='Факт выставки')),
                ('deviation', models.IntegerField(blank=True, default=0, null=True, verbose_name='Отклонение')),
                ('product', models.ForeignKey(db_column='product_article', on_delete=django.db.models.deletion.DO_NOTHING, related_name='store_products', to='reports.product')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='store_products', to='reports.store')),
            ],
            options={
                'verbose_name': 'Мебельный салон',
                'verbose_name_plural': 'Мебельные салоны',
            },
        ),
        migrations.CreateModel(
            name='WarehouseProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stock', models.IntegerField(default=0, null=True, verbose_name='Остаток')),
                ('product', models.ForeignKey(db_column='product_article', on_delete=django.db.models.deletion.DO_NOTHING, related_name='warehouse_products', to='reports.product')),
                ('warehouse', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='warehouse_products', to='reports.warehouse')),
            ],
            options={
                'verbose_name': 'Продукт на складе',
                'verbose_name_plural': 'Продукты на складе',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='work_position',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='reports.workposition', verbose_name='Должность'),
        ),
        migrations.AddConstraint(
            model_name='storeproduct',
            constraint=models.UniqueConstraint(fields=('store', 'product'), name='unique_store_product'),
        ),
        migrations.AddConstraint(
            model_name='warehouseproduct',
            constraint=models.UniqueConstraint(fields=('warehouse', 'product'), name='unique_warehouse_product'),
        ),
    ]
